#Store raw data into hdfs location
hadoop fs -put /home/cloudera/data/sales_order_data.csv /tmp/hive_data

#Create a table "sales_order_csv" which will store csv data
create table sales_order_csv (
    > ORDERNUMBER int,
    > QUANTITYORDERED int,
    > PRICEEACH float,
    > ORDERLINENUMBER int,
    > SALES float,
    > STATUS string,
    > QTR_ID int,
    > MONTH_ID int,
    > YEAR_ID int,
    > PRODUCTLINE string,
    > MSRP int,
    > PRODUCTCODE string,
    > PHONE string,
    > CITY string,
    > STATE string,
    > POSTALCODE string,
    > COUNTRY string,
    > TERRITORY string,
    > CONTACTLASTNAME string,
    > CONTACTFIRSTNAME string,
    > DEALSIZE string
    > )
    > row format delimited
    > fields terminated by ','
    > tblproperties("skip.header.line.count"="1")
    > ;
    
#Load data from hdfs path into "sales_order_csv"
load data inpath '/tmp/hive_data/' into table sales_order_csv;


#Create an internal hive table which will store data in ORC format "sales_order_orc"
create table sales_order_orc (
    > ORDERNUMBER int,
    > QUANTITYORDERED int,
    > PRICEEACH float,
    > ORDERLINENUMBER int,
    > SALES float,
    > STATUS string,
    > QTR_ID int,
    > MONTH_ID int,
    > YEAR_ID int,
    > PRODUCTLINE string,
    > MSRP int,
    > PRODUCTCODE string,
    > PHONE string,
    > CITY string,
    > STATE string,
    > POSTALCODE string,
    > COUNTRY string,
    > TERRITORY string,
    > CONTACTLASTNAME string,
    > CONTACTFIRSTNAME string,
    > DEALSIZE string
    > )
    > stored as orc;
    
#Load data from "sales_order_csv" into "sales_order_orc"
from sales_order_csv insert overwrite table sales_order_orc select *;

--------------------------------
1. calculate total sales per year
select year_id, sum(sales) as total_sales from sales_order_orc group by year_id;

output - 
year_id	total_sales
2003	3516979.547241211
2004	4724162.593383789
2005	1791486.7086791992

---------------------------------
2. Find a product for which maximum orders were placed
select productline, count(distinct ordernumber) as total_orders from sales_order_orc group by productline order by total_orders desc limit 1;

output - 
productline	total_orders
Classic Cars	199

---------------------------------
3. Calculate the total sales for each quarter
select qtr_id, sum(sales) as total_sales from sales_order_orc group by qtr_id;

o/p - 
qtr_id	total_sales
1	2350817.726501465
2	2048120.3029174805
3	1758910.808959961
4	3874780.010925293

---------------------------------
4. In which quarter sales was minimum
select qtr_id, sum(sales) as total_sales from sales_order_orc group by qtr_id order by total_sales limit 1;

o/p - 
qtr_id	total_sales
3	1758910.808959961

----------------------------------
5. In which country sales was maximum and in which country sales was minimum
select country, sum(sales) as total_sales from sales_order_orc group by country order by total_sales desc limit 1
union all
select country, sum(sales) as total_sales from sales_order_orc group by country order by total_sales limit 1;

output - 
_u1.country	_u1.total_sales
Ireland	57756.43029785156
USA	3627982.825744629

---------------------------------
6. Calculate quartelry sales for each city
select city, qtr_id, sum(sales) from sales_order_orc group by city, qtr_id;

---------------------------------
7. Find a month for each year in which maximum number of quantities were sold

select year_id, month_id, total_sales from
(
    select year_id, month_id, sum(sales) as total_sales,
           dense_rank() over(partition by year_id order by sum(sales) desc) as dr
      from sales_order_orc
      group by year_id, month_id
) subquery
where dr = 1;

output -
year_id	month_id	total_sales
2003	11	1029837.6627197266
2004	11	1089048.0076293945
2005	5	457861.06036376953
